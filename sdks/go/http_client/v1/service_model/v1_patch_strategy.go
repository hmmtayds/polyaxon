// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1PatchStrategy PatchStrategy
//
// - replace: Replaces the keys
//  - isnull: Only set the keys if they do not exist or if they are null
//  - post_merge: Merge the all keys and replace by new one
//  - pre_merge: Merge the all keys and keep old ones
//
// swagger:model v1PatchStrategy
type V1PatchStrategy string

const (

	// V1PatchStrategyReplace captures enum value "replace"
	V1PatchStrategyReplace V1PatchStrategy = "replace"

	// V1PatchStrategyIsnull captures enum value "isnull"
	V1PatchStrategyIsnull V1PatchStrategy = "isnull"

	// V1PatchStrategyPostMerge captures enum value "post_merge"
	V1PatchStrategyPostMerge V1PatchStrategy = "post_merge"

	// V1PatchStrategyPreMerge captures enum value "pre_merge"
	V1PatchStrategyPreMerge V1PatchStrategy = "pre_merge"
)

// for schema
var v1PatchStrategyEnum []interface{}

func init() {
	var res []V1PatchStrategy
	if err := json.Unmarshal([]byte(`["replace","isnull","post_merge","pre_merge"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1PatchStrategyEnum = append(v1PatchStrategyEnum, v)
	}
}

func (m V1PatchStrategy) validateV1PatchStrategyEnum(path, location string, value V1PatchStrategy) error {
	if err := validate.EnumCase(path, location, value, v1PatchStrategyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 patch strategy
func (m V1PatchStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1PatchStrategyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
