// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package presets_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// PatchPresetReader is a Reader for the PatchPreset structure.
type PatchPresetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchPresetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchPresetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchPresetNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchPresetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchPresetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchPresetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchPresetOK creates a PatchPresetOK with default headers values
func NewPatchPresetOK() *PatchPresetOK {
	return &PatchPresetOK{}
}

/*PatchPresetOK handles this case with default header values.

A successful response.
*/
type PatchPresetOK struct {
	Payload *service_model.V1Preset
}

func (o *PatchPresetOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/presets/{preset.uuid}][%d] patchPresetOK  %+v", 200, o.Payload)
}

func (o *PatchPresetOK) GetPayload() *service_model.V1Preset {
	return o.Payload
}

func (o *PatchPresetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Preset)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPresetNoContent creates a PatchPresetNoContent with default headers values
func NewPatchPresetNoContent() *PatchPresetNoContent {
	return &PatchPresetNoContent{}
}

/*PatchPresetNoContent handles this case with default header values.

No content.
*/
type PatchPresetNoContent struct {
	Payload interface{}
}

func (o *PatchPresetNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/presets/{preset.uuid}][%d] patchPresetNoContent  %+v", 204, o.Payload)
}

func (o *PatchPresetNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchPresetNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPresetForbidden creates a PatchPresetForbidden with default headers values
func NewPatchPresetForbidden() *PatchPresetForbidden {
	return &PatchPresetForbidden{}
}

/*PatchPresetForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type PatchPresetForbidden struct {
	Payload interface{}
}

func (o *PatchPresetForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/presets/{preset.uuid}][%d] patchPresetForbidden  %+v", 403, o.Payload)
}

func (o *PatchPresetForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchPresetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPresetNotFound creates a PatchPresetNotFound with default headers values
func NewPatchPresetNotFound() *PatchPresetNotFound {
	return &PatchPresetNotFound{}
}

/*PatchPresetNotFound handles this case with default header values.

Resource does not exist.
*/
type PatchPresetNotFound struct {
	Payload interface{}
}

func (o *PatchPresetNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/presets/{preset.uuid}][%d] patchPresetNotFound  %+v", 404, o.Payload)
}

func (o *PatchPresetNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchPresetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPresetDefault creates a PatchPresetDefault with default headers values
func NewPatchPresetDefault(code int) *PatchPresetDefault {
	return &PatchPresetDefault{
		_statusCode: code,
	}
}

/*PatchPresetDefault handles this case with default header values.

An unexpected error response
*/
type PatchPresetDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the patch preset default response
func (o *PatchPresetDefault) Code() int {
	return o._statusCode
}

func (o *PatchPresetDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/presets/{preset.uuid}][%d] PatchPreset default  %+v", o._statusCode, o.Payload)
}

func (o *PatchPresetDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *PatchPresetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
