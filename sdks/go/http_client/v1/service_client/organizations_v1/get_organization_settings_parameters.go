// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package organizations_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationSettingsParams creates a new GetOrganizationSettingsParams object
// with the default values initialized.
func NewGetOrganizationSettingsParams() *GetOrganizationSettingsParams {
	var ()
	return &GetOrganizationSettingsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationSettingsParamsWithTimeout creates a new GetOrganizationSettingsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOrganizationSettingsParamsWithTimeout(timeout time.Duration) *GetOrganizationSettingsParams {
	var ()
	return &GetOrganizationSettingsParams{

		timeout: timeout,
	}
}

// NewGetOrganizationSettingsParamsWithContext creates a new GetOrganizationSettingsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOrganizationSettingsParamsWithContext(ctx context.Context) *GetOrganizationSettingsParams {
	var ()
	return &GetOrganizationSettingsParams{

		Context: ctx,
	}
}

// NewGetOrganizationSettingsParamsWithHTTPClient creates a new GetOrganizationSettingsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOrganizationSettingsParamsWithHTTPClient(client *http.Client) *GetOrganizationSettingsParams {
	var ()
	return &GetOrganizationSettingsParams{
		HTTPClient: client,
	}
}

/*GetOrganizationSettingsParams contains all the parameters to send to the API endpoint
for the get organization settings operation typically these are written to a http.Request
*/
type GetOrganizationSettingsParams struct {

	/*OrganizationCreatedAt
	  Optional time when the entity was created.

	*/
	OrganizationCreatedAt *strfmt.DateTime
	/*OrganizationIsPublic
	  Optional flag to tell if this organization is public.

	*/
	OrganizationIsPublic *bool
	/*OrganizationName
	  Name.

	*/
	OrganizationName *string
	/*OrganizationPreset
	  Default preset.

	*/
	OrganizationPreset *string
	/*OrganizationQueue
	  Default queue.

	*/
	OrganizationQueue *string
	/*OrganizationRole
	  Current user's role in this org.

	*/
	OrganizationRole *string
	/*OrganizationUpdatedAt
	  Optional last time the entity was updated.

	*/
	OrganizationUpdatedAt *strfmt.DateTime
	/*OrganizationUser
	  User.

	*/
	OrganizationUser *string
	/*OrganizationUserEmail
	  Read-only User email.

	*/
	OrganizationUserEmail *string
	/*Owner
	  Owner of the namespace

	*/
	Owner string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get organization settings params
func (o *GetOrganizationSettingsParams) WithTimeout(timeout time.Duration) *GetOrganizationSettingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organization settings params
func (o *GetOrganizationSettingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organization settings params
func (o *GetOrganizationSettingsParams) WithContext(ctx context.Context) *GetOrganizationSettingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organization settings params
func (o *GetOrganizationSettingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organization settings params
func (o *GetOrganizationSettingsParams) WithHTTPClient(client *http.Client) *GetOrganizationSettingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organization settings params
func (o *GetOrganizationSettingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganizationCreatedAt adds the organizationCreatedAt to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationCreatedAt(organizationCreatedAt *strfmt.DateTime) *GetOrganizationSettingsParams {
	o.SetOrganizationCreatedAt(organizationCreatedAt)
	return o
}

// SetOrganizationCreatedAt adds the organizationCreatedAt to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationCreatedAt(organizationCreatedAt *strfmt.DateTime) {
	o.OrganizationCreatedAt = organizationCreatedAt
}

// WithOrganizationIsPublic adds the organizationIsPublic to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationIsPublic(organizationIsPublic *bool) *GetOrganizationSettingsParams {
	o.SetOrganizationIsPublic(organizationIsPublic)
	return o
}

// SetOrganizationIsPublic adds the organizationIsPublic to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationIsPublic(organizationIsPublic *bool) {
	o.OrganizationIsPublic = organizationIsPublic
}

// WithOrganizationName adds the organizationName to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationName(organizationName *string) *GetOrganizationSettingsParams {
	o.SetOrganizationName(organizationName)
	return o
}

// SetOrganizationName adds the organizationName to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationName(organizationName *string) {
	o.OrganizationName = organizationName
}

// WithOrganizationPreset adds the organizationPreset to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationPreset(organizationPreset *string) *GetOrganizationSettingsParams {
	o.SetOrganizationPreset(organizationPreset)
	return o
}

// SetOrganizationPreset adds the organizationPreset to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationPreset(organizationPreset *string) {
	o.OrganizationPreset = organizationPreset
}

// WithOrganizationQueue adds the organizationQueue to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationQueue(organizationQueue *string) *GetOrganizationSettingsParams {
	o.SetOrganizationQueue(organizationQueue)
	return o
}

// SetOrganizationQueue adds the organizationQueue to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationQueue(organizationQueue *string) {
	o.OrganizationQueue = organizationQueue
}

// WithOrganizationRole adds the organizationRole to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationRole(organizationRole *string) *GetOrganizationSettingsParams {
	o.SetOrganizationRole(organizationRole)
	return o
}

// SetOrganizationRole adds the organizationRole to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationRole(organizationRole *string) {
	o.OrganizationRole = organizationRole
}

// WithOrganizationUpdatedAt adds the organizationUpdatedAt to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationUpdatedAt(organizationUpdatedAt *strfmt.DateTime) *GetOrganizationSettingsParams {
	o.SetOrganizationUpdatedAt(organizationUpdatedAt)
	return o
}

// SetOrganizationUpdatedAt adds the organizationUpdatedAt to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationUpdatedAt(organizationUpdatedAt *strfmt.DateTime) {
	o.OrganizationUpdatedAt = organizationUpdatedAt
}

// WithOrganizationUser adds the organizationUser to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationUser(organizationUser *string) *GetOrganizationSettingsParams {
	o.SetOrganizationUser(organizationUser)
	return o
}

// SetOrganizationUser adds the organizationUser to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationUser(organizationUser *string) {
	o.OrganizationUser = organizationUser
}

// WithOrganizationUserEmail adds the organizationUserEmail to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationUserEmail(organizationUserEmail *string) *GetOrganizationSettingsParams {
	o.SetOrganizationUserEmail(organizationUserEmail)
	return o
}

// SetOrganizationUserEmail adds the organizationUserEmail to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationUserEmail(organizationUserEmail *string) {
	o.OrganizationUserEmail = organizationUserEmail
}

// WithOwner adds the owner to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOwner(owner string) *GetOrganizationSettingsParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOwner(owner string) {
	o.Owner = owner
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationSettingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OrganizationCreatedAt != nil {

		// query param organization.created_at
		var qrOrganizationCreatedAt strfmt.DateTime
		if o.OrganizationCreatedAt != nil {
			qrOrganizationCreatedAt = *o.OrganizationCreatedAt
		}
		qOrganizationCreatedAt := qrOrganizationCreatedAt.String()
		if qOrganizationCreatedAt != "" {
			if err := r.SetQueryParam("organization.created_at", qOrganizationCreatedAt); err != nil {
				return err
			}
		}

	}

	if o.OrganizationIsPublic != nil {

		// query param organization.is_public
		var qrOrganizationIsPublic bool
		if o.OrganizationIsPublic != nil {
			qrOrganizationIsPublic = *o.OrganizationIsPublic
		}
		qOrganizationIsPublic := swag.FormatBool(qrOrganizationIsPublic)
		if qOrganizationIsPublic != "" {
			if err := r.SetQueryParam("organization.is_public", qOrganizationIsPublic); err != nil {
				return err
			}
		}

	}

	if o.OrganizationName != nil {

		// query param organization.name
		var qrOrganizationName string
		if o.OrganizationName != nil {
			qrOrganizationName = *o.OrganizationName
		}
		qOrganizationName := qrOrganizationName
		if qOrganizationName != "" {
			if err := r.SetQueryParam("organization.name", qOrganizationName); err != nil {
				return err
			}
		}

	}

	if o.OrganizationPreset != nil {

		// query param organization.preset
		var qrOrganizationPreset string
		if o.OrganizationPreset != nil {
			qrOrganizationPreset = *o.OrganizationPreset
		}
		qOrganizationPreset := qrOrganizationPreset
		if qOrganizationPreset != "" {
			if err := r.SetQueryParam("organization.preset", qOrganizationPreset); err != nil {
				return err
			}
		}

	}

	if o.OrganizationQueue != nil {

		// query param organization.queue
		var qrOrganizationQueue string
		if o.OrganizationQueue != nil {
			qrOrganizationQueue = *o.OrganizationQueue
		}
		qOrganizationQueue := qrOrganizationQueue
		if qOrganizationQueue != "" {
			if err := r.SetQueryParam("organization.queue", qOrganizationQueue); err != nil {
				return err
			}
		}

	}

	if o.OrganizationRole != nil {

		// query param organization.role
		var qrOrganizationRole string
		if o.OrganizationRole != nil {
			qrOrganizationRole = *o.OrganizationRole
		}
		qOrganizationRole := qrOrganizationRole
		if qOrganizationRole != "" {
			if err := r.SetQueryParam("organization.role", qOrganizationRole); err != nil {
				return err
			}
		}

	}

	if o.OrganizationUpdatedAt != nil {

		// query param organization.updated_at
		var qrOrganizationUpdatedAt strfmt.DateTime
		if o.OrganizationUpdatedAt != nil {
			qrOrganizationUpdatedAt = *o.OrganizationUpdatedAt
		}
		qOrganizationUpdatedAt := qrOrganizationUpdatedAt.String()
		if qOrganizationUpdatedAt != "" {
			if err := r.SetQueryParam("organization.updated_at", qOrganizationUpdatedAt); err != nil {
				return err
			}
		}

	}

	if o.OrganizationUser != nil {

		// query param organization.user
		var qrOrganizationUser string
		if o.OrganizationUser != nil {
			qrOrganizationUser = *o.OrganizationUser
		}
		qOrganizationUser := qrOrganizationUser
		if qOrganizationUser != "" {
			if err := r.SetQueryParam("organization.user", qOrganizationUser); err != nil {
				return err
			}
		}

	}

	if o.OrganizationUserEmail != nil {

		// query param organization.user_email
		var qrOrganizationUserEmail string
		if o.OrganizationUserEmail != nil {
			qrOrganizationUserEmail = *o.OrganizationUserEmail
		}
		qOrganizationUserEmail := qrOrganizationUserEmail
		if qOrganizationUserEmail != "" {
			if err := r.SetQueryParam("organization.user_email", qOrganizationUserEmail); err != nil {
				return err
			}
		}

	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
