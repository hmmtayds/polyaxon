// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* tslint:disable */
/* eslint-disable */
/**
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * The version of the OpenAPI document: 1.1.9-rc6
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface V1DockerfileType
 */
export interface V1DockerfileType {
    /**
     * 
     * @type {string}
     * @memberof V1DockerfileType
     */
    image?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof V1DockerfileType
     */
    env?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof V1DockerfileType
     */
    path?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof V1DockerfileType
     */
    copy?: { [key: string]: string; };
    /**
     * 
     * @type {Array<string>}
     * @memberof V1DockerfileType
     */
    run?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof V1DockerfileType
     */
    lang_env?: string;
    /**
     * 
     * @type {number}
     * @memberof V1DockerfileType
     */
    uid?: number;
    /**
     * 
     * @type {number}
     * @memberof V1DockerfileType
     */
    gid?: number;
    /**
     * 
     * @type {string}
     * @memberof V1DockerfileType
     */
    filename?: string;
    /**
     * 
     * @type {string}
     * @memberof V1DockerfileType
     */
    workdir?: string;
    /**
     * 
     * @type {string}
     * @memberof V1DockerfileType
     */
    workdir_path?: string;
    /**
     * 
     * @type {string}
     * @memberof V1DockerfileType
     */
    shell?: string;
}

export function V1DockerfileTypeFromJSON(json: any): V1DockerfileType {
    return V1DockerfileTypeFromJSONTyped(json, false);
}

export function V1DockerfileTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1DockerfileType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'image': !exists(json, 'image') ? undefined : json['image'],
        'env': !exists(json, 'env') ? undefined : json['env'],
        'path': !exists(json, 'path') ? undefined : json['path'],
        'copy': !exists(json, 'copy') ? undefined : json['copy'],
        'run': !exists(json, 'run') ? undefined : json['run'],
        'lang_env': !exists(json, 'lang_env') ? undefined : json['lang_env'],
        'uid': !exists(json, 'uid') ? undefined : json['uid'],
        'gid': !exists(json, 'gid') ? undefined : json['gid'],
        'filename': !exists(json, 'filename') ? undefined : json['filename'],
        'workdir': !exists(json, 'workdir') ? undefined : json['workdir'],
        'workdir_path': !exists(json, 'workdir_path') ? undefined : json['workdir_path'],
        'shell': !exists(json, 'shell') ? undefined : json['shell'],
    };
}

export function V1DockerfileTypeToJSON(value?: V1DockerfileType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'image': value.image,
        'env': value.env,
        'path': value.path,
        'copy': value.copy,
        'run': value.run,
        'lang_env': value.lang_env,
        'uid': value.uid,
        'gid': value.gid,
        'filename': value.filename,
        'workdir': value.workdir,
        'workdir_path': value.workdir_path,
        'shell': value.shell,
    };
}


