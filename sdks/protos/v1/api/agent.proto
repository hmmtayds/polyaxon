/**
 * Copyright 2018-2020 Polyaxon, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

import "v1/api/status.proto";

// Agent specification
message Agent {
    // UUID
    string uuid = 1;

    // Name
    string name = 2;

    // Optional description
    string description = 3;

    // Optional tags of this entity
    repeated string tags = 4;

    // Optional a flag to disable the agent
    bool disabled = 5;

    // Namespace where the agent is deployed
    string namespace = 6;

    // Optional version api
    google.protobuf.Struct version_api = 7;

    // Content of the agent config
    string content = 8;

    // The agent max concurrency
    int32 concurrency = 9;

    // Optional time when the entity was created
    google.protobuf.Timestamp created_at = 10;

    // Optional last time the entity was updated
    google.protobuf.Timestamp updated_at = 11;

    // Optional latest status of this entity
    Statuses status = 12;

    // Optional settings
    google.protobuf.Struct settings = 13;
}

 // Request data to create/update agents
 message AgentBodyRequest {
    // Owner of the namespace
    string owner = 1;

    // Agent body
    Agent agent = 2;
 }


// Contains list agents
message ListAgentsResponse {
    // Count of the entities
    int32 count = 1;

    // List of all entities
    repeated Agent results = 2;

    // Previous page
    string previous = 3;

    // Next page
    string next = 4;
}


// Queue specification
message Queue {
    // UUID
    string uuid = 1;

    // Agent
    string agent = 2;

    // Name
    string name = 3;

    // Optional description
    string description = 4;

    // Optional tags of this entity
    repeated string tags = 5;

    // The queue priority
    int32 priority = 6;

    // The queue concurrency
    int32 concurrency = 7;

    // Optional time when the entity was created
    google.protobuf.Timestamp created_at = 8;

    // Optional last time the entity was updated
    google.protobuf.Timestamp updated_at = 9;

}

 // Request data to create/update agents
 message QueueBodyRequest {
    // Owner of the namespace
    string owner = 1;

    // Agent that consumes the queue
    string agent = 2;

    // Queue body
    Queue queue = 3;
 }


// Contains list agents
message ListQueuesResponse {
    // Count of the entities
    int32 count = 1;

    // List of all entities
    repeated Queue results = 2;

    // Previous page
    string previous = 3;

    // Next page
    string next = 4;
}

// Contains the agents (queues/runs) state
message AgentStateResponse {
    message AgentState {
        // List of schdules runs
        google.protobuf.Struct schedules = 1;

        // List of notifier runs
        google.protobuf.Struct notifier = 2;

        // List of watchdogs runs
        google.protobuf.Struct watchdogs = 3;

        // List of tuners runs
        google.protobuf.Struct tuners = 4;

        // List of queued runs
        google.protobuf.Struct queued = 5;

        // List of stopping runs
        google.protobuf.Struct stopping = 6;

        // List of apply runs
        google.protobuf.Struct apply = 7;

        // A flag to tell the agent that the queues are still full
        bool full = 8;
    }

    Statuses status = 1;
    AgentState state = 2;
}
